package yahoo.helloworld;

// Посмотри на этот android.support.v7 bla bla bla - это и есть та библиотека обратной совместимости

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;

/* Если бы мы не нажали там галочку, здесь было бы extends Activity, но класс AppCompatActivity включает в себя
необходимые функции не только для запуска на текущем Target SDK но и прежних версиях
*/

public class MainActivity extends AppCompatActivity {

    /*
    onCreate - входная точка приложения, на самом деле есть события которые запускаются до onCreate, но здесь можно
    присвоить Layout чтобы что-то показать на экране
    */


    @Override
    // - Это директива которая даёт понять что следующая функция Overriditsya, знаешь что это значит? Да, переопределение
    protected void onCreate(Bundle savedInstanceState) {
        String[] arr = getResources().getStringArray(R.array.asdf);
        Log.d("f" , arr[2]);
        /* Bundle savedInstanceState - это если приложение было открыто,
        передаются предыдущие настройки экрана, чтобы ющзер видел то где он остановился
        (когда свернул и вернулся в приложение
        вместо + запятая?
        Бро, я быстро забуду теорию если не будет практики */

        // super - ЗНАЮ great)
        super.onCreate(savedInstanceState);
        /* рисует GUI из следующего Layout - xml файла, все имеющиеся в проекте файлы (касаемые непосредственно проекта, доступны
        через специальную переменную R, R это нечто что присваивает числовые идентификаторы файлам - зависимостям и делает их доступными
        т.е. "R.layout.activity_main" - это не сам файл, а его идентификатор
        Бро, R это идентификатор текущих файлов, а layout это объект ? нет, layout это просто название xml фалйлов которые предназначены
        для обрисовки GUI, а R это нечто вроде посреднического языка который используется при компилировании чтобы среда знала откуда
        и что брать, без R мы не смогли бы написать нижеследующую строку
        */
        setContentView(R.layout.activity_main);

        // Когда нужна инфа, спрашиваешь на stackoverflow там все есть
        //Бро, в ООП не такой принцип объект.функция_объекта(или поле) ?
        /* ты прав, но дело в том, что тут не чисто Java код, мы работаем с Android SDK - Software development Kit
        * sdk это как набор API мы не имеем контроля над этими API какими их Бог дал, такими и исполльзуем))
        *  приватные ? API имеет приватный код с публичным доступом, т.е. внутренняя логика скрыта а нам предосттавляет интерфейсы
        *
        *  но в случае с R это даже не про API, это про саму прогу Android Studio или точнее про компилятор Java кода в APK
        *  чтобы скомпилировать анроид приложение, нужен не просто Java код а целая куча всяких вещей, таких как Layout например
        *  поэтому и начинаются ухищрения в виде R и прочих, но это не меняет ООО подхода, просто тут надо знать что является объектом
        *  а что нет. R - это объект, короче, activity_main здесь выступает как константа, числовая обычная публичная константа
        *  R - класс
        *  layout  - т.е. мы сейчас узнали что это Nested Class, т.е. R - class, R.layout - его подкласс,
        *  activity_main  - контанта переданная функции layout объекта R ? пажди
        *  если ты помнишь, в ООП не обязательно всё является объектом, бывают статические классы, и статические переменные и функции
        *  ты можешь получить доступ к статическим данным без создания объекта, да, запускаются до запуска main и доступ можно получить без создания объекта
        *  верно этим мы и занимаемся когда говорим R.layout.activity_main
        *  значит ли это, что статус R.layout private static ? или protected static он должен быть Public static иначе ты его не увидишь
        *  protected ты бы увидел если бы он был бы частью родительского класса, но класс R - совсем левая тема которая не зависит
        *  от твоего базового класса, он сам по себе/
        *  то есть ты его не импортируешь, а он сам автоматом вставляется в байт код приложения ?
        *  он не вставляет в код, он используется компилятором как список со ссылками к файлам чтобы их включить в APK и делать
        *  нужные ссылки на код, когда что открывать и что где показывать
        *
        *  если я правильно понял, R это внутренняя библиотека, хочешь пользуйся, хочешь не пользуйся, но доступ у тебя есть
        *  ппор имерно так, ено в большинствеслучаев тебе просто необходимо бывает пользоваться, например если там есть
        *  хотя бы GUI хотя бы один экран, надо получить доступ к layout  поазать его
        *
        *  кстати, тут два файла Gradle  которых я говорил их два потому что один относится к непосредственно модулю, второй более
        *  к общему проекту, большинство настроек делается в том который касается модуля - модуль это как бы "приложение" тут
        *  (test - это для тестов, пока мы не будем их рассматривать)
        *  res - апка для файлов приложения, всё что находится в res перечисляется в R
        *
        *  В папке drawable хранятся твои иконки, изображения и тп
        *  В папке Layout - GUI и элементы GUI
        *  В папке mipmap иконки, по ходу
        *  В value - названия, тексты, подсказки, цвета, стили, темы и прочее, мы не пишем слова напряму. в коде, мы пишем их
        *  в strings.xml и потом через R обращаемся, зачем? - затем что если мы завтра решим добавить новый язык в прогу
        *  мы просто переведем strings и добавим его в папку values-ce - для чеченской локализации)))
        *
        *   Бро, System.out.print работает тут? Да, но лучше пользоваться классом Log и его мтеодами типа d
        *   я забыл как это делается(((
        *
        *   включи хром
            Здесь есть такой монитор, там можно выводить инфу, и есть разные уровни сообщений, это используется для фильтрации
            Log.D - значит Debug, Но можно использоваь и другие, тут интересное это HWA - ы можешь задать тэг и сортировать сообщения
            из твоего проги по своему тэгу, обычно там куча всего и страшно бывает смотреть без фильтрации
        */

        // Попробуем создать виртуальное устройство и запустить черт не то
        Log.d("HWA", getResources().getString(R.string.yabadabadoo));
        /* названия переменных в xml подчиняются какому то правилу или берутся из класса? нет, пишутся от фонаря
        * в приложении нет значения переменной yabadabadoo
        * вообще -то это не переменные, это просто xml который читается R, R делает из них переменных, и все что делает R это int
        * - т.е. числовые идентификаторы а метод getResources().getString - берет этот идентфиикатор, читает эту строку и возвращает
        * значение
        * у нас в приложении нигде не указано что надо использовать yabadabadoo кроме как ниже в Log.D
        * а где указан app_name ? в xml layout айле, тут технология такая что эти ресурсы (все что в res) о идее для работы с xml
        * их удобнее и проще использовать там, не надо всякие getResources и прочее, и когда там есть имя, Android Studio тупо
        * подставляет их значения, смотри
        *
        *
        *
        * Мы остановились на layouta'х, и прочих xml, значит Андроид Студио это нечто что берет java код, берет ресурсы приложения
        * и делает из них apk файл - компилирует, все ресурсы находятся в res папке в xml файлах и все файлы начинаются с
        * <resource>
        *
        *   все xml файлы ?давай посмотрим
        *   все кроме layout, layout начинается с xml версии и потом сразу идет корневой элемент дизайна (подложка)
        *   как мы  говорили все ресурсы моэно достать тем или иным способом из R, т.е R держит ссылки и по ним помжно
        *   получить доступ к ресурсу
        *
        *   Давай посмотрим на Layout, при создании приложения была галочка в конструкторе (создать activity_main layout)
        *   вот он, о
        *   Бро, я сегодня тренировался и создавал проекты с рамкой, без рамки, проект без рамки и
        *   рамку внутри проекта, вот тут создавал activity, типа разобрался с лайот? не совсем, просто тренировался
        *   ок, давай быстро пройдемся по типам лайоутов или к асинхронным потокам?
        *   ок, 1 одну сигарету покурю, помогает настроиться)ок 1 мин
        * */

    }
}
